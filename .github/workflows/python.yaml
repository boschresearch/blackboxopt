name: ci-cd-pipeline

on:
  push:
    branches:
    - main
  pull_request:
    branches:
    - main
  release:
    types: [published]
jobs:
  lint:
    runs-on: ubuntu-20.04
    container: python:3.8-slim
    steps:
      - uses: actions/checkout@v3
      - name: Install dependencies
        run: |
          pip install poetry
          poetry install --extras "all"
      - name: Formatting
        if: always()
        run: |
          poetry run black --check --exclude blackboxopt/examples/ .
          poetry run black --check --include blackboxopt/examples/ --line-length 80 .
      - name: Type Checks
        if: always()
        run: poetry run mypy --config-file pyproject.toml .
      - name: Linting
        if: always()
        run: |
          poetry run ruff check blackboxopt/
          poetry run ruff check tests/
  test:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-20.04]
        python-version: ["python:3.8", "python:3.9", "python:3.10", "python:3.11"]
    container: ${{ matrix.python-version }}-slim
    steps:
      - uses: actions/checkout@v3
      - name: Install dependencies
        run: |
          pip install poetry
          poetry install --extras "all"
      - name: Run tests
        if: always()
        # pipefail ensures that this step still fails when pytest fails
        run: |
          set -o pipefail
          poetry run pytest --cov=blackboxopt tests | sed -n '/ -----------/,$p' > coverage.txt
        shell: bash
      # Note, this overrides the coverage file for each python version again.
      # If different coverage is expected per python version, log separate artifacts.
      - name: Upload coverage
        uses: actions/upload-artifact@v3
        with:
          name: coverage-summary
          path: coverage.txt
  report:
    needs: [test]
    runs-on: ubuntu-20.04
    if: github.event_name == 'pull_request'
    steps:
      - name: Download coverage summary
        uses: actions/download-artifact@v3
        with:
          name: coverage-summary
      - name: Markdown format
        run: echo -e "\`\`\`\n$(cat coverage.txt)\n\`\`\`" > coverage.md
      - name: Coverage to PR comment
        uses: thollander/actions-comment-pull-request@v2
        with:
          filePath: coverage.md
          comment_tag: coverage-summary

  deploy:
    needs: [lint, test]
    if: startsWith(github.ref, 'refs/tags/v')
    runs-on: ubuntu-20.04
    container: python:3.8-slim
    steps:
      - uses: actions/checkout@v3
      - name: Install dependencies
        run: |
          pip install poetry
      - name: Build & release
        env:
          PYPI_TOKEN: ${{ secrets.PYPI_TOKEN }}
        run: |
          poetry config pypi-token.pypi $PYPI_TOKEN
          poetry publish --build
  docs:
    needs: [lint, test]
    if: startsWith(github.ref, 'refs/tags/v')
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0 # fetch all branches, incl. gh-pages
      - uses: actions/setup-python@v2
        with:
          python-version: 3.8
      - name: Install dependencies
        run: |
          pip install poetry
          poetry install --extras "all"
      - name: Setup git author
        run: |
          git config --global user.name docs deploy
          git config --global user.email docs@github-action.local
      - name: Get GIT_TAG_NAME
        uses: olegtarasov/get-tag@v2.1
        id: tagName
      - name: Publish
        run: |
          poetry run mike deploy --push --update-aliases ${{ env.GIT_TAG_NAME }} latest
          poetry run mike set-default --push latest
